"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _defineProperty = function (obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); };

module.exports = fluxMixin;
/**
 * fluxMixin
 *
 * Exports a function that creates a React component mixin. The mixin exposes
 * a Flux instance as `this.flux`. This requires that flux be passed as either
 * context or as a prop (prop takes precedence). Children also are given access
 * to flux instance as `context.flux`.
 *
 * It also adds the method `connectToStores()`, which ensures that the component
 * state stays in sync with the specified Flux stores. See the inline docs
 * of `connectToStores` for details.
 *
 * Any arguments passed to the mixin creator are passed to `connectToStores()`
 * and used as the return value of `getInitialState()`. This lets you handle
 * all of the state initialization and updates in a single place, while removing
 * the burden of manually adding and removing store listeners.
 *
 * @example
 * let Component = React.createClass({
 *   mixins: [fluxMixin({
 *     storeA: store => ({
 *       foo: store.state.a,
 *     }),
 *     storeB: store => ({
 *       bar: store.state.b,
 *     })
 *   }]
 * });
 */

var PropTypes = require("react").PropTypes;
var Flux = require("../Flux").Flux;
var assign = _interopRequire(require("object-assign"));

var shallowEqual = _interopRequire(require("react/lib/shallowEqual"));

function fluxMixin() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return {

    contextTypes: {
      flux: PropTypes.instanceOf(Flux) },

    childContextTypes: {
      flux: PropTypes.instanceOf(Flux) },

    getChildContext: function getChildContext() {
      return {
        flux: this.flux
      };
    },

    getInitialState: function getInitialState() {
      var _ref;
      this._fluxStateGetters = {};
      this._fluxListeners = {};
      this._fluxDidSyncStoreState = false;
      this.flux = this.props.flux || this.context.flux;

      if (!(this.flux instanceof Flux)) {
        // TODO: print the actual class name here
        throw new Error("fluxMixin: Could not find Flux instance. Ensure that your component " + "has either `this.context.flux` or `this.props.flux`.");
      }

      return (_ref = this).connectToStores.apply(_ref, args);
    },

    componentWillUnmount: function componentWillUnmount() {
      for (var key in this._fluxListeners) {
        if (!this._fluxListeners.hasOwnProperty(key)) continue;

        var store = this.flux.getStore(key);
        if (typeof store === "undefined") continue;

        var listener = this._fluxListeners[key];

        store.removeListener("change", listener);
      }
    },

    componentDidUpdate: function componentDidUpdate(prevProps) {
      if (!shallowEqual(prevProps, this.props)) {
        this.updateStores();
      }
    },

    updateStores: function updateStores() {
      var state = this.getStoreState();
      this.setState(state);
    },

    getStoreState: function getStoreState() {
      var state = {};

      for (var key in this._fluxStateGetters) {
        var storeStateGetter = this._fluxStateGetters[key];
        var store = this.flux.getStore(key);

        var storeState = storeStateGetter(store);

        assign(state, storeState);
      }

      return state;
    },

    /**
     * Connect component to stores, get the combined initial state, and
     * subscribe to future changes. There are three ways to call it. The
     * simplest is to pass a single store key and, optionally, a state getter.
     * The state getter is a function that takes the store as a parameter and
     * returns the state that should be passed to the component's `setState()`.
     * If no state getter is specified, the default getter is used, which simply
     * returns the entire store state.
     *
     * The second form accepts an array of store keys. With this form, every
     * store uses the default state getter.
     *
     * The last form accepts an object of store keys mapped to state getters. As
     * a shortcut, you can pass `null` as a state getter to use the default
     * state getter.
     *
     * Returns the combined initial state of all specified stores.
     *
     * This way you can write all the initialization and update logic in a single
     * location, without having to mess with adding/removing listeners.
     *
     * @type {string|array|object} stateGetterMap - map of keys to getters
     * @returns {object} Combined initial state of stores
     */
    connectToStores: function connectToStores() {
      var stateGetterMap = arguments[0] === undefined ? {} : arguments[0];
      var stateGetter = arguments[1] === undefined ? defaultStateGetter : arguments[1];
      var initialState = {};

      // Ensure that stateGetterMap is an object
      if (typeof stateGetterMap === "string") {
        var key = stateGetterMap;

        stateGetterMap = _defineProperty({}, key, stateGetter);
      } else if (Array.isArray(stateGetterMap)) {
        stateGetterMap = stateGetterMap.reduce(function (result, key) {
          result[key] = stateGetter;
          return result;
        }, {});
      }

      for (var key in stateGetterMap) {
        var store = this.flux.getStore(key);

        if (typeof store === "undefined") {
          throw new Error("connectToStores(): Store with key '" + key + "' does not exist.");
        }

        var storeStateGetter = stateGetterMap[key];

        if (storeStateGetter === null) storeStateGetter = defaultStateGetter;

        storeStateGetter = storeStateGetter.bind(this);
        this._fluxStateGetters[key] = storeStateGetter;

        var initialStoreState = storeStateGetter(store);

        var listener = createStoreListener(this, store, storeStateGetter).bind(this);

        store.addListener("change", listener);
        this._fluxListeners[key] = listener;

        assign(initialState, initialStoreState);
      }

      return initialState;
    }

  };
}

function createStoreListener(component, store, storeStateGetter) {
  return function () {
    if (this.isMounted()) {
      var state = storeStateGetter(store);
      this.setState(state);
    }
  };
}

function defaultStateGetter(store) {
  return store.state;
}
//# sourceMappingURL=data:application/json;base64,