"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var _Flux = require("../../Flux");

var Flummox = _Flux.Flummox;
var Store = _Flux.Store;
var Actions = _Flux.Actions;
var React = _interopRequire(require("react/addons"));

var TestUtils = React.addons.TestUtils;
var FluxComponent = _interopRequire(require("../FluxComponent"));

describe("FluxComponent", function () {
  var TestActions = (function (Actions) {
    function TestActions() {
      _classCallCheck(this, TestActions);

      if (Actions != null) {
        Actions.apply(this, arguments);
      }
    }

    _inherits(TestActions, Actions);

    _prototypeProperties(TestActions, null, {
      getSomething: {
        value: function getSomething(something) {
          return something;
        },
        writable: true,
        configurable: true
      }
    });

    return TestActions;
  })(Actions);

  var TestStore = (function (Store) {
    function TestStore(flux) {
      _classCallCheck(this, TestStore);

      _get(Object.getPrototypeOf(TestStore.prototype), "constructor", this).call(this);

      var testActions = flux.getActions("test");
      this.register(testActions.getSomething, this.handleGetSomething);

      this.state = {
        something: null
      };
    }

    _inherits(TestStore, Store);

    _prototypeProperties(TestStore, null, {
      handleGetSomething: {
        value: function handleGetSomething(something) {
          this.setState({ something: something });
        },
        writable: true,
        configurable: true
      }
    });

    return TestStore;
  })(Store);

  var Flux = (function (Flummox) {
    function Flux() {
      _classCallCheck(this, Flux);

      _get(Object.getPrototypeOf(Flux.prototype), "constructor", this).call(this);

      this.createActions("test", TestActions);
      this.createStore("test", TestStore, this);
    }

    _inherits(Flux, Flummox);

    return Flux;
  })(Flummox);

  it("gets Flux property from either props or context", function () {
    var flux = new Flux();
    var contextComponent = undefined,
        propsComponent = undefined;

    React.withContext({ flux: flux }, function () {
      contextComponent = TestUtils.renderIntoDocument(React.createElement(FluxComponent, null));
    });

    propsComponent = TestUtils.renderIntoDocument(React.createElement(FluxComponent, { flux: flux }));

    expect(contextComponent.flux).to.be.an["instanceof"](Flummox);
    expect(propsComponent.flux).to.be.an["instanceof"](Flummox);
  });

  it("passes connectToStore prop to FluxMixin's connectToStores()", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var component = TestUtils.renderIntoDocument(React.createElement(FluxComponent, { flux: flux, connectToStores: "test" }));

    actions.getSomething("something good");
    expect(component.state.something).to.deep.equal("something good");
    actions.getSomething("something else");
    expect(component.state.something).to.deep.equal("something else");
  });

  it("injects children with flux prop", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    expect(div.props.flux).to.equal(flux);
  });

  it("injects children with props corresponding to component state", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, connectToStores: "test" },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    actions.getSomething("something good");
    expect(div.props.something).to.equal("something good");
    actions.getSomething("something else");
    expect(div.props.something).to.equal("something else");
  });

  it("injects children with any extra props", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, extraProp: "hello" },
      React.createElement("div", null)
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    expect(div.props.extraProp).to.equal("hello");
    expect(Object.keys(div.props)).to.deep.equal(["flux", "extraProp"]);
  });

  it("wraps multiple children in span tag", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null),
      React.createElement("div", null)
    ));

    var wrapper = TestUtils.findRenderedDOMComponentWithTag(tree, "span");
    var divs = TestUtils.scryRenderedDOMComponentsWithTag(tree, "div");

    expect(divs.length).to.equal(2);
  });

  it("does not wrap single child in span tag", function () {
    var flux = new Flux();

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux },
      React.createElement("div", null)
    ));

    expect(TestUtils.findRenderedDOMComponentWithTag.bind(TestUtils, tree, "span")).to["throw"]("Did not find exactly one match for tag:span");
  });

  it("allows for nested FluxComponents", function () {
    var flux = new Flux();
    var actions = flux.getActions("test");

    var tree = TestUtils.renderIntoDocument(React.createElement(
      FluxComponent,
      { flux: flux, connectToStores: "test" },
      React.createElement(
        FluxComponent,
        null,
        React.createElement("div", null)
      )
    ));

    var div = TestUtils.findRenderedDOMComponentWithTag(tree, "div");

    actions.getSomething("something good");
    expect(div.props.something).to.equal("something good");
    actions.getSomething("something else");
    expect(div.props.something).to.equal("something else");
  });
});
//# sourceMappingURL=data:application/json;base64,