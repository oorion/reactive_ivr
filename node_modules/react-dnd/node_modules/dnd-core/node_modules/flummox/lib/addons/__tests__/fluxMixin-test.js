"use strict";

var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

var _get = function get(object, property, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc && desc.writable) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _prototypeProperties = function (child, staticProps, instanceProps) { if (staticProps) Object.defineProperties(child, staticProps); if (instanceProps) Object.defineProperties(child.prototype, instanceProps); };

var _inherits = function (subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; };

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

var fluxMixin = _interopRequire(require("../fluxMixin"));

var _Flux = require("../../Flux");

var Flummox = _Flux.Flummox;
var Store = _Flux.Store;
var Actions = _Flux.Actions;
var sinon = _interopRequire(require("sinon"));

var React = _interopRequire(require("react/addons"));

var PropTypes = React.PropTypes;
var TestUtils = React.addons.TestUtils;


describe("fluxMixin", function () {
  var TestActions = (function (Actions) {
    function TestActions() {
      _classCallCheck(this, TestActions);

      if (Actions != null) {
        Actions.apply(this, arguments);
      }
    }

    _inherits(TestActions, Actions);

    _prototypeProperties(TestActions, null, {
      getSomething: {
        value: function getSomething(something) {
          return something;
        },
        writable: true,
        configurable: true
      }
    });

    return TestActions;
  })(Actions);

  var TestStore = (function (Store) {
    function TestStore(flux) {
      _classCallCheck(this, TestStore);

      _get(Object.getPrototypeOf(TestStore.prototype), "constructor", this).call(this);

      var testActions = flux.getActions("test");
      this.register(testActions.getSomething, this.handleGetSomething);

      this.state = {
        something: null
      };
    }

    _inherits(TestStore, Store);

    _prototypeProperties(TestStore, null, {
      handleGetSomething: {
        value: function handleGetSomething(something) {
          this.setState({ something: something });
        },
        writable: true,
        configurable: true
      }
    });

    return TestStore;
  })(Store);

  var Flux = (function (Flummox) {
    function Flux() {
      _classCallCheck(this, Flux);

      _get(Object.getPrototypeOf(Flux.prototype), "constructor", this).call(this);

      this.createActions("test", TestActions);
      this.createStore("test", TestStore, this);
      this.createStore("test2", TestStore, this);
    }

    _inherits(Flux, Flummox);

    return Flux;
  })(Flummox);

  var ComponentWithFluxMixin = React.createClass({
    displayName: "ComponentWithFluxMixin",
    mixins: [fluxMixin()],

    render: function render() {
      return null;
    }
  });

  it("gets flux from either props or context", function () {
    var flux = new Flux();
    var contextComponent = undefined,
        propsComponent = undefined;

    var ContextComponent = addContext(ComponentWithFluxMixin, { flux: flux }, { flux: React.PropTypes.instanceOf(Flummox) });

    var tree = TestUtils.renderIntoDocument(React.createElement(ContextComponent, { keys: "test" }));

    contextComponent = TestUtils.findRenderedComponentWithType(tree, ComponentWithFluxMixin);

    propsComponent = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

    expect(contextComponent.flux).to.be.an["instanceof"](Flummox);
    expect(propsComponent.flux).to.be.an["instanceof"](Flummox);
  });

  it("exposes flux as context", function () {
    var flux = new Flux();

    var ChildComponent = React.createClass({
      displayName: "ChildComponent",
      contextTypes: {
        flux: PropTypes.instanceOf(Flummox) },

      render: function render() {
        return React.createElement("div", null);
      }
    });

    var Component = React.createClass({
      displayName: "Component",
      mixins: [fluxMixin()],

      render: function render() {
        return React.createElement(
          "div",
          null,
          React.createElement(ChildComponent, { key: "test" })
        );
      }
    });

    var tree = TestUtils.renderIntoDocument(React.createElement(Component, { flux: flux }));

    var childComponent = TestUtils.findRenderedComponentWithType(tree, ChildComponent);

    expect(childComponent.context.flux).to.equal(flux);
  });

  it("throws error if neither props or context is set", function () {
    var flux = new Flux();

    expect(TestUtils.renderIntoDocument.bind(null, React.createElement(ComponentWithFluxMixin, null))).to["throw"]("fluxMixin: Could not find Flux instance. Ensure that your component " + "has either `this.context.flux` or `this.props.flux`.");
  });

  it("ignores change event after unmounted", function () {
    var flux = new Flux();
    flux.getActions("test").getSomething("foo");

    var getterMap = {
      test: function (store) {
        return { something: store.state.something };
      }
    };
    var Component = React.createClass({
      displayName: "Component",
      mixins: [fluxMixin(getterMap)],

      render: function render() {
        return null;
      }
    });

    var container = document.createElement("div");
    var component = React.render(React.createElement(Component, { flux: flux }), container);
    var listener = flux.getStore("test").listeners("change")[0];

    React.unmountComponentAtNode(container);

    flux.getActions("test").getSomething("bar");
    listener();

    expect(component.state.something).to.equal("foo");
  });

  it("uses #connectToStores() to get initial state", function () {
    var flux = new Flux();

    flux.getActions("test").getSomething("foobar");

    var getterMap = {
      test: function (store) {
        return {
          something: store.state.something,
          custom: true };
      } };

    var mixin = fluxMixin(getterMap);

    var connectToStores = sinon.spy(mixin, "connectToStores");

    var Component = React.createClass({
      displayName: "Component",
      mixins: [mixin],

      getInitialState: function getInitialState() {
        return {
          foobar: "baz" };
      },

      render: function render() {
        return null;
      }
    });

    var component = TestUtils.renderIntoDocument(React.createElement(Component, { key: "test", flux: flux }));

    expect(connectToStores.calledOnce).to.be["true"];
    expect(connectToStores.firstCall.args[0]).to.equal(getterMap);

    expect(flux.getStore("test").listeners("change")).to.have.length(1);

    expect(component.state).to.deep.equal({
      something: "foobar",
      custom: true,
      foobar: "baz" });
  });

  describe("#connectToStores", function () {
    it("returns initial state", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      var initialState = component.connectToStores("test");

      expect(initialState).to.deep.equal({
        something: null });
    });

    it("merges store state with component state on change", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.setState({ otherThing: "barbaz" });

      component.connectToStores("test");
      flux.getActions("test").getSomething("foobar");

      expect(component.state).to.deep.equal({
        something: "foobar",
        otherThing: "barbaz" });
    });

    it("uses custom state getter, if given", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.setState({ otherThing: "barbaz" });

      component.connectToStores("test", function (store) {
        return {
          something: store.state.something,
          custom: true };
      });

      flux.getActions("test").getSomething("foobar");

      expect(component.state).to.deep.equal({
        something: "foobar",
        otherThing: "barbaz",
        custom: true });
    });

    it("binds state getter to component", function () {
      var flux = new Flux();

      var Component = React.createClass({
        displayName: "Component",
        mixins: [fluxMixin({
          test: function (store) {
            this.someComponentMethod("some arg");

            return {
              something: store.state.something,
              custom: true };
          } })],

        render: function render() {
          return null;
        },

        someComponentMethod: function someComponentMethod(string) {
          return string;
        }
      });

      var component = TestUtils.renderIntoDocument(React.createElement(Component, { key: "test", flux: flux }));

      var someComponentMethod = sinon.spy(component, "someComponentMethod");
      flux.getActions("test").getSomething("foobar");

      expect(someComponentMethod.calledOnce).to.be["true"];
      expect(someComponentMethod.firstCall.args[0]).to.equal("some arg");
    });

    it("syncs with store after prop change", function () {
      var flux = new Flux();

      var Component = React.createClass({
        displayName: "Component",
        mixins: [fluxMixin({
          test: function (store) {
            return {
              foo: "foo is " + this.props.foo };
          } })],

        render: function render() {
          return null;
        }
      });

      var component = TestUtils.renderIntoDocument(React.createElement(Component, { key: "test", flux: flux, foo: "bar" }));

      expect(component.state.foo).to.equal("foo is bar");

      component.setProps({ foo: "baz" });

      expect(component.state.foo).to.equal("foo is baz");
    });

    it("accepts object of keys to state getters", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.setState({ otherThing: "barbaz" });

      component.connectToStores({
        test: function (store) {
          return {
            something: store.state.something,
            custom: true };
        } });

      flux.getActions("test").getSomething("foobar");

      expect(component.state).to.deep.equal({
        something: "foobar",
        otherThing: "barbaz",
        custom: true });
    });

    it("converts array of stores to state getter", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.connectToStores(["test"]);

      flux.getActions("test").getSomething("foobar");

      expect(component.state).to.deep.equal({
        something: "foobar" });
    });

    it("uses default getter if null is passed as getter", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.setState({ otherThing: "barbaz" });

      component.connectToStores("test", null);

      flux.getActions("test").getSomething("foobar");

      expect(component.state).to.deep.equal({
        something: "foobar",
        otherThing: "barbaz" });
    });

    it("removes listener before unmounting", function () {
      var flux = new Flux();
      var div = document.createElement("div");

      var component = React.render(React.createElement(ComponentWithFluxMixin, { flux: flux }), div);

      var store = flux.getStore("test");
      component.connectToStores("test");

      expect(store.listeners("change").length).to.equal(1);
      React.unmountComponentAtNode(div);
      expect(store.listeners("change").length).to.equal(0);
    });
  });

  describe("#getStoreState", function () {
    it("gets combined state of connected stores", function () {
      var flux = new Flux();

      var component = TestUtils.renderIntoDocument(React.createElement(ComponentWithFluxMixin, { key: "test", flux: flux }));

      component.connectToStores({
        test: function (store) {
          return {
            foo: "bar" };
        },
        test2: function (store) {
          return {
            bar: "baz"
          };
        }
      });

      component.setState({ baz: "foo" });

      expect(component.getStoreState()).to.deep.equal({
        foo: "bar",
        bar: "baz"
      });
    });
  });
});

function addContext(Component, context, contextTypes) {
  return React.createClass({
    childContextTypes: contextTypes,

    getChildContext: function getChildContext() {
      return context;
    },

    render: function render() {
      return React.createElement(Component, this.props);
    }
  });
}
//# sourceMappingURL=data:application/json;base64,